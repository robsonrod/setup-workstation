---
- name: Configure my workstation
  hosts: all, localhost
  connection: local

  vars:
    ansible_command_timeout: 120
    fonts:
      - { url: "https://github.com/tonsky/FiraCode/releases/download/6.2/Fira_Code_v6.2.zip", name: "FiraCode" }
      - { url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Iosevka.zip", name: "Iosevka" }
      - { url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip", name: "JetBrainsMono" }
      - { url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Ubuntu.zip", name: "Ubuntu" }
      - { url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/RobotoMono.zip", name: "RobotoMono" }
      - { url: "https://github.com/adobe-fonts/source-code-pro/archive/refs/heads/release.zip", name: "SourceCodePro" }
      - { url: "https://github.com/FortAwesome/Font-Awesome/releases/download/6.4.0/fontawesome-free-6.4.0-desktop.zip", name: "AwesomeD" }
      - { url: "https://github.com/FortAwesome/Font-Awesome/releases/download/6.4.0/fontawesome-free-6.4.0-web.zip", name: "AwesomeW" }

    apps:
      - arc-theme
      - rofi
      - dunst
      - picom
      - bspwm
      - polybar
      - sxhkd
      - feh
      - x11-utils
      - x11-xserver-utils
      - scrot
      - xautolock
      - alacritty
      - imagemagick
      - inotify-tools
      - zathura
      - peek
      - software-properties-common
      - build-essential
      - manpages-dev
      - binutils
      - dirmngr
      - lsb-core
      - iputils-ping
      - keyutils
      - gnupg2
      - gnupg-agent
      - openssh-client
      - libc6-dev-i386
      - linux-libc-dev
      - python3
      - python3-pip
      - uuid-dev
      - xclip
      - ranger
      - make
      - stow
      - wget
      - curl
      - zip
      - unzip
      - p7zip-full
      - xz-utils
      - tldr
      - exa
      - ripgrep
      - zoxide
      - fzf
      - tmux
      - bat
      - neovim
      - emacs28

  tasks:

    - name: Add emacs28 repository from PPA and install its signing key on target
      become: true
      ansible.builtin.apt_repository:
        repo: ppa:kelleyk/emacs

    - name: Add neovim repository from PPA
      become: true
      ansible.builtin.apt_repository:
        repo: ppa:neovim-ppa/unstable

    - name: Adding Peek Repository
      become: true
      ansible.builtin.apt_repository:
        repo: ppa:peek-developers/stable

    - name: Installing terminal applications
      become: true
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        name: "{{ item }}"
        install_recommends: true
        state: present
      loop:
        "{{ apps }}"

    - name: Installing starship
      block:
        - name: Check if starship exists
          ansible.builtin.command: "which starship"
          register: starship
          ignore_errors: true
          changed_when: false
        - name: Get starship install script
          ansible.builtin.get_url:
            url: "https://starship.rs/install.sh"
            dest: "/tmp/starship_install.sh"
            mode: "0755"
          when: starship is failed
        - name: Install starship
          ansible.builtin.shell:
            cmd: "/tmp/starship_install.sh --yes"
            executable: /bin/sh
          become: true
          when: starship is failed

    - name: Installing fonts
      block:
        - name: Fonts directory exists
          ansible.builtin.command: "test -d /home/{{ ansible_user_id }}/.local/share/fonts/"
          register: font_exists
          ignore_errors: true
          changed_when: false
        - name: Create fonts directory if it does not exist
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.local/share/fonts/{{ item.name }}"
            state: directory
            mode: "0755"
          loop: "{{ fonts }}"
          when: font_exists is failed
        - name: JetBrains font exists
          ansible.builtin.shell: "ls /home/{{ ansible_user_id }}/.local/share/fonts/JetBrainsMono/JetBrains*Mono*Regular*Nerd*"
          register: jetbrains_exists
          ignore_errors: true
          changed_when: false
        - name: Install fonts
          ansible.builtin.unarchive:
            src: "{{ item.url }}"
            dest: "/home/{{ ansible_user_id }}/.local/share/fonts/{{ item.name }}"
            remote_src: true
            keep_newer: true
          loop: "{{ fonts }}"
          when: jetbrains_exists is failed

    - name: Installing theme
      block:
        - name: Icons folder exists
          ansible.builtin.command: "test -d /home/{{ ansible_user_id }}/.local/share/icons/"
          register: icons_exists
          ignore_errors: true
          changed_when: icons_exists is failed
        - name: Create icons directory if it does not exist
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.local/share/icons"
            state: directory
            mode: "0755"
          when: icons_exists is failed
        - name: Get papirus theme
          ansible.builtin.get_url:
            url: https://git.io/papirus-icon-theme-install
            dest: /tmp/papirus-icon-theme-install
            mode: "0755"
        - name: Install papirus theme
          ansible.builtin.shell:
            cmd: "DESTDIR=/home/{{ ansible_user_id }}/.local/share/icons /tmp/papirus-icon-theme-install"
            executable: /bin/sh
          when: icons_exists is failed

    - name: Installing tmux plugins
      block:
        - name: Check if tmux plugins dir exists
          ansible.builtin.command: test -d /home/{{ ansible_user_id }}/.tmux/plugins/tpm
          register: tmux_exists
          ignore_errors: true
          changed_when: tmux_exists is failed
        - name: Installing tmux plugins
          ansible.builtin.git:
            repo: https://github.com/tmux-plugins/tpm
            dest: /home/{{ ansible_user_id }}/.tmux/plugins/tpm
            version: master
          when: tmux_exists is failed

    - name: Installing asdf virtual machine
      block:
        - name: Check if asdf vm exists
          ansible.builtin.command: test -d /home/{{ ansible_user_id }}/.asdf
          register: asdf_exists
          ignore_errors: true
          changed_when: asdf_exists is failed
        - name: Installing tmux plugins
          ansible.builtin.git:
            repo: https://github.com/asdf-vm/asdf.git
            dest: /home/{{ ansible_user_id }}/.asdf
            version: v0.10.2
          when: asdf_exists is failed

    - name: Install vscode
      block:
        - name: Install Microsoft Key
          become: true
          ansible.builtin.apt_key:
            url: 'https://packages.microsoft.com/keys/microsoft.asc'
            state: present
        - name: Install VSCode Repository
          become: true
          ansible.builtin.apt_repository:
            repo: 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
            state: present
            filename: vscode
        - name: Install Visual Studio Code
          become: true
          ansible.builtin.apt:
            name: code
        - name: Install Virtual Studio Code Extensions
          ansible.builtin.shell:
            cmd: "code --install-extension {{ item }}"
            executable: /bin/bash
          when: true
          loop:
            - aaron-bond.better-comments
            - alefragnani.Bookmarks
            - cschlosser.doxdocgen
            - DavidAnson.vscode-markdownlint
            - dracula-theme.theme-dracula
            - eamodio.gitlens
            - golang.go
            - Gruntfuggly.todo-tree
            - jebbs.plantuml
            - ms-python.isort
            - ms-python.python
            - ms-vscode.cpptools
            - naumovs.color-highlight
            - PKief.material-icon-theme
            - redhat.ansible
            - redhat.vscode-yaml
            - RoscoP.ActiveFileInStatusBar
            - rust-lang.rust-analyzer
            - ryu1kn.text-marker
            - Shan.code-settings-sync
            - tomoki1207.pdf
            - vscodevim.vim
            - yzane.markdown-pdf
            - yzhang.markdown-all-in-one

    - name: Installing rust
      block:
        - name: Check if cargo is installed
          ansible.builtin.command: "test -f /home/{{ ansible_user_id }}/.cargo/bin/cargo"
          register: cargo_exists
          ignore_errors: true
          changed_when: false

        - name: Download Installer
          ansible.builtin.get_url:
            url: "https://sh.rustup.rs"
            dest: "/tmp/sh.rustup.rs"
            mode: "0755"
            force: "yes"
          tags:
            - rust
          when: cargo_exists is failed

        - name: Install rust/cargo
          ansible.builtin.shell:
            cmd: /tmp/sh.rustup.rs -y
            executable: /bin/sh
          tags:
            - rust
          when: cargo_exists is failed

    - name: Install docker
      block:
        - name: Install Docker Key
          become: true
          ansible.builtin.apt_key:
            url: "https://download.docker.com/linux/ubuntu/gpg"
            state: present
        - name: Install Docker Repository
          become: true
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
            filename: docker-ce
        - name: Install Docker
          become: true
          ansible.builtin.apt:
            name: docker-ce
        - name: Adding existing user to group Docker
          become: true
          ansible.builtin.user:
            name: "{{ ansible_user_id }}"
            groups: docker
            append: true

    - name: Install Docker-Compose
      block:
        - name: Get docker-compose
          become: true
          ansible.builtin.get_url:
            url: "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-linux-x86_64"
            dest: "/usr/local/bin/docker-compose"
            mode: "0755"
        - name: Change file ownership, group and permissions
          become: true
          ansible.builtin.file:
            path: "/usr/local/bin/docker-compose"
            owner: root
            group: docker
            mode: "0755"
        - name: Install Docker Machine Bash Completion
          become: true
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/docker/machine/v0.16.0/contrib/completion/bash/docker-machine.bash"
            dest: "/etc/bash_completion.d/docker-machine"
            mode: "0755"
        - name: Install Docker-Compose Bash Completion
          become: true
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/docker/compose/1.26.2/contrib/completion/bash/docker-compose"
            dest: "/etc/bash_completion.d/docker-compose"
            mode: "0755"
